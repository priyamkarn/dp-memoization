class Solution {
public:
    int f(int i, int k, int b, vector<int>& val, vector<vector<vector<int>>>& dp) {
        if (k == 0 || i >= val.size()) {
            return 0;
        }
        if (dp[i][k][b] != -1) {
            return dp[i][k][b];
        }
        int profit;
        if (b == 0) {
            profit = max(f(i + 1, k, 1, val, dp) - val[i], f(i + 1, k, 0, val, dp));
        } else {
            profit = max(f(i + 1, k - 1, 0, val, dp) + val[i], f(i + 1, k, 1, val, dp));
        }
        return dp[i][k][b] = profit;
    }

int maxProfit(vector<int>& prices) {
   int n=prices.size();
    int k=2;
    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(k+1, vector<int>(2, -1)));
        return f(0, k, 0, prices, dp);
}   
};
